//=================================================================================================================
//              [$ Date: 10.10.2021 $]
//=================================================================================================================
//!
//! @mainpage   cstack.h
//!          
//! @copyright  (C) Mtvy (Matvei Prudnikov)
//! @author     Telegram <@mtvyp>
//! @date       10.10.2021
//!
//! @note       Stack library 
//!
//! @file       cstack.h
//!
//=================================================================================================================

#ifndef CSTACK_HEADER_INCLUDE
#define CSTACK_HEADER_INCLUDE

//-----------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

#include <assert.h>

//-----------------------------------------------------------------------------------------------------------------

typedef int STACK_DATA_TYPE;

typedef unsigned long long STACK_CANARY_TYPE;

typedef unsigned long long int HASH_TYPE;

const STACK_CANARY_TYPE STACK_BEGIN_CANARY  = 0xCA0C0DE1;
const STACK_CANARY_TYPE STACK_END_CANARY    = 0xCA0C0DE2;

const size_t STACK_NUMBER_POISON = -8;

//-----------------------------------------------------------------------------------------------------------------

enum STACK_STATUS
{
    STACK_INVALID,
    STACK_VALID
};

enum STACK_CONSTS
{
    STACK_NULL     ,
    STACK_PICK_NEXT,
    STACK_INIT_NUM
};

enum STACK_POISON
{
    STACK_DATA_POISON = 999,
};

//-----------------------------------------------------------------------------------------------------------------

struct CStack
{
    STACK_DATA_TYPE *data     ;
    STACK_STATUS     status   ;
    HASH_TYPE        hash     ;
    size_t           capacity ;
    size_t           item_size;
};

//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief This function count hash sum 
//!
//! @param [in]   ptr   Pointer
//! @param [in]   size  size_t
//! @param [in]   hash  HASH_TYPE
//!
//! @param [out]  hash  HASH_TYPE
//!
//! @return Hash sum
//!
//-----------------------------------------------------------------------------------------------------------------
HASH_TYPE sumHash(void *ptr, size_t size, HASH_TYPE hash);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! @brief Hash calculation for all attributes 
//!
//! @param [in]   stack CStack Pointer
//!
//-----------------------------------------------------------------------------------------------------------------
void stack_calculate_hash(CStack *stack);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Stack validity check
//!
//! @param [in]   ptr   Pointer
//! @param [in]   size  size_t
//! @param [in]   hash  HASH_TYPE
//!
//! @param [out]  STACK_STATUS
//!
//! @return Stack valid or not
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_is_valid(void *ptr);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Stack health check
//!
//! @param [in]   stack  CStack Pointer
//!
//! @param [out]  STACK_STATUS
//!
//! @return Stack health or not
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_check_health(CStack *stack);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Put limitation for stack data
//!
//! @param [in]   stack        CStack Pointer
//! @param [in]   bytes        size_t
//! @param [in]   SIDE_CANARY  STACK_CANARY_TYPE
//!
//! @param [out]  STACK_STATUS
//!
//! @return Put status
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_put_canary(CStack *stack, size_t bytes, STACK_CANARY_TYPE SIDE_CANARY);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Dump stack data
//!
//! @param [in]   stack  CStack Pointer
//! @param [in]   log    FILE Pointer
//! @param [in]   func   const char Pointer
//! @param [in]   line   const int
//! @param [in]   file   const char Pointer
//! @param [in]   item   const char Pointer
//!
//! @param [out]  STACK_STATUS
//!
//! @return Dump status
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_dump(CStack *stack, FILE *log, const char* func, const int line, const char *file, const char *item);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Increase stack size
//!
//! @param [in]   stack    CStack Pointer
//! @param [in]   capacity size_t
//!
//! @return Reallocate status
//! 
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_reallocate(CStack *stack, size_t capacity);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Stack constructor
//!
//! @param [in]   stack    CStack Pointer
//!
//! @return Ð¡onstructor status
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_ctor(CStack *stack);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Stack destructor
//!
//! @param [in]   stack    CStack Pointer
//!
//! @param [out]  STACK_STATUS
//!
//! @return Destructor status
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_dtor(CStack *stack);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Push item into stack
//!
//! @param [in]   stack    CStack Pointer
//! @param [in]   item     int
//!
//! @param [out]  STACK_STATUS
//!
//! @return Push status
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_push(CStack *stack, int item);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! 
//! @brief Delete item from stack
//!
//! @param [in]   stack    CStack Pointer
//! @param [in]   item     STACK_DATA_TYPE Pointer
//!
//! @param [out]  STACK_STATUS
//!
//! @return Pop status
//!
//-----------------------------------------------------------------------------------------------------------------
STACK_STATUS stack_pop (CStack *stack, STACK_DATA_TYPE *item);
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
//! @brief Basic Unit Tests
//-----------------------------------------------------------------------------------------------------------------
int UnitTest();
//-----------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------

#define STACK_DUMP(stack, log) stack_dump(stack, log, __PRETTY_FUNCTION__, __LINE__, __FILE__, "stack");


#define STACK_PRINT(size, data)                                \
        for (int _ind = 0; _ind < size; _ind++)                 \
        {                                                        \
            if (data[_ind] == STACK_DATA_POISON) continue;        \
            printf("|----------------%d)_[ VALUE: %d         \n"   \
                   "|                    [----> # %p         \n|\n",\
                     _ind, data[_ind], data[_ind]);                  \
        }                                                             \
        printf("|-------------------------------------------------\n");
    

#define STACK_PRINT_CANARY printf(                         \
        "|*Data Value After Push Canary*            \n"     \
        "|                     left_ptr: %p         \n"      \
        "|                    right_ptr: %p         \n"       \
        "|-------------------------------------------------\n",\
                              stack.data[0],   stack.data[1]);                                                       
                          
//-----------------------------------------------------------------------------------------------------------------

#endif CSTACK_HEADER_INCLUDE
